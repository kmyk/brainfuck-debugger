#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('file')
parser.add_argument('-i', '--input', metavar='file')
parser.add_argument('-s', '--store', choices=['zero', 'eof', 'same'], default='eof')
# parser.add_argument('--decimal', choices=[10, 16], type=int, default=10)
# parser.add_argument('-m', '--memory', choices=['extend', 'die'], help='default is extend')
args = parser.parse_args()

class Debugger(object):
    def __init__(self, codepath, inputpath=None, store='eof'):
        self.store = store
        with open(codepath) as h:
            self.code = h.buffer.read()
        if inputpath is None:
            self.input = bytes()
        else:
            with open(inputpath) as h:
                self.input = h.buffer.read()
        self.pptr = 0
        self.mptr = 0
        self.mem = bytearray(30000)
        self.inputptr = 0
        self.output = []

        self.match = {}
        que = []
        for i in range(len(self.code)):
            if self.code[i] == ord('['):
                que.append(i)
            elif self.code[i] == ord(']'):
                assert len(que) >= 1
                l = que.pop()
                r = i
                self.match[l] = r
                self.match[r] = l
        self.depth = 0

    def eof(self):
        return self.pptr == len(self.code)

    def step(self):
        while not self.eof() and chr(self.code[self.pptr]) not in list('+-<>.,[]#'):
            self.pptr += 1
        if self.eof():
            return
        c = chr(self.code[self.pptr])
        if c == '>':
            self.mptr += 1
            self.pptr += 1
            assert self.mptr < len(self.mem)
        elif c == '<':
            self.mptr -= 1
            self.pptr += 1
            assert 0 <= self.mptr
        elif c == '+':
            self.mem[self.mptr] = (self.mem[self.mptr] + 1) % 256
            self.pptr += 1
        elif c == '-':
            self.mem[self.mptr] = (self.mem[self.mptr] - 1) % 256
            self.pptr += 1
        elif c == '.':
            self.output.append(self.mem[self.mptr])
            self.pptr += 1
        elif c == ',':
            if self.inputptr < len(self.input):
                self.mem[self.mptr] = self.input[self.inputptr]
                self.inputptr += 1
            else:
                if self.store == 'zero':
                    self.mem[self.mptr] = 0
                elif self.store == 'eof':
                    self.mem[self.mptr] = 255
                elif self.store == 'same':
                    pass
                else:
                    raise ValueError()
            self.pptr += 1
        elif c == '[':
            if self.mem[self.mptr] == 0:
                self.pptr = self.match[self.pptr] + 1
            else:
                self.depth += 1
                self.pptr += 1
        elif c == ']':
            if self.mem[self.mptr] == 0:
                self.depth -= 1
                self.pptr += 1
            else:
                self.pptr = self.match[self.pptr] + 1
        elif c == '#': # breakpoint
            self.pptr += 1
        else:
            raise ValueError()

    def onbreakpoint(self):
        return self.eof() or (self.pptr != 0 and self.code[self.pptr - 1] == ord('#'))

class Renderer(object):
    def __init__(self, debugger, scr):
        self.debugger = debugger
        self.scr = scr

    def __call__(self):
        scr = self.scr
        scr.erase()
        height, width = scr.getmaxyx()
        y = 0
        y += self.render_code(y, 1, width-2)
        y += self.render_memory(y, 1, width-2)
        y += self.render_input(y, 1, width-2)
        y += self.render_output(y, 1, width-2)
        scr.refresh()

    def render_code(self, y, x, w):
        debugger = self.debugger
        scr = self.scr
        for dx in range(w):
            i = debugger.pptr + dx - w // 2
            if 0 <= i < len(debugger.code):
                scr.addstr(y, x + dx, chr(debugger.code[i]))
        scr.addstr(y+1, x + w//2, '^')
        scr.addstr(y+2, x + w//2, 'pptr')
        return 3

    def render_memory(self, y, x, w):
        debugger = self.debugger
        scr = self.scr
        for i in range(w // 3):
            dx = i * 3
            scr.addstr(y,   x + dx, str(debugger.mem[i]).rjust(3))
            scr.addstr(y+1, x + dx, chr(debugger.mem[i]).rjust(3))
        if debugger.mptr*3+2 < w:
            scr.addstr(y+2, x + debugger.mptr*3+2, '^')
            scr.addstr(y+3, x + debugger.mptr*3+2, 'memory')
        return 4

    def render_input(self, y, x, w):
        debugger = self.debugger
        scr = self.scr
        for i in range(w // 3):
            dx = i * 3
            if 0 <= i < len(debugger.input):
                scr.addstr(y,   x + dx, str(debugger.input[i]).rjust(3))
                scr.addstr(y+1, x + dx, chr(debugger.input[i]).rjust(3))
        if debugger.inputptr*3+2 < w:
            scr.addstr(y+2, x + debugger.inputptr*3+2, '^')
            scr.addstr(y+3, x + debugger.inputptr*3+2, 'input')
        return 4

    def render_output(self, y, x, w):
        debugger = self.debugger
        scr = self.scr
        for i in range(w // 3):
            dx = i * 3
            if 0 <= i < len(debugger.output):
                scr.addstr(y,   x + dx, str(debugger.output[i]).rjust(3))
                scr.addstr(y+1, x + dx, chr(debugger.output[i]).rjust(3))
        if len(debugger.output)*3-1 < w:
            scr.addstr(y+2, x + max(0, len(debugger.output)*3-1), '^')
            scr.addstr(y+3, x + max(0, len(debugger.output)*3-1), 'output')
        return 4


import curses

def main(stdscr):
    curses.use_default_colors()
    stdscr.nodelay(0)

    debugger = Debugger(args.file, args.input, store=args.store)
    renderer = Renderer(debugger, stdscr)

    renderer()

    def run():
        stdscr.nodelay(1) # no block
    def stop():
        stdscr.nodelay(0) # block
    breakp = lambda: False

    while True:
        c = stdscr.getch()
        if c == ord('q'):
            break
        elif c == ord('s'):
            debugger.step()
            stop()
        elif c == ord('n'):
            depth = debugger.depth
            breakp = lambda: debugger.depth <= depth
            run()
        elif c == ord('u'):
            depth = debugger.depth
            breakp = lambda: debugger.depth < depth
            run()
        elif c == ord('c'):
            breakp = lambda: False
            run()
        elif c == -1: # timeout
            for i in range(1000):
                debugger.step()
                if breakp() or debugger.onbreakpoint():
                    stop()
                    break
        renderer()

curses.wrapper(main)
